name: Angular CI with SonarCloud and Docker Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  install:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

  build:
    name: Build Angular project
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build Angular (prod configuration)
        run: npm run build -- --configuration=production

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run tests with coverage (ignore errors)
        run: |
          npm run test -- --watch=false --code-coverage || echo "Tests failed but continuing..."

  sonar:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Install SonarCloud scanner
        run: npm install -g sonar-scanner

      - name: Run SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner

  docker-deploy:
    name: Build & Push Docker Image to Nexus
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Nexus Docker Registry
        
        run: echo "${{ secrets.NEXUS_PASSWORD }}" | docker login https://a81d-197-15-124-194.ngrok-free.app -u ${{ secrets.NEXUS_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t a81d-197-15-124-194.ngrok-free.app/frontapp:latest .

      - name: Push Docker image
        run: docker push a81d-197-15-124-194.ngrok-free.app/frontapp:latest